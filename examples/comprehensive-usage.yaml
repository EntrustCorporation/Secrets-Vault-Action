name: Deploy Application

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Fetch secrets from vault
      - name: Fetch secrets from vault
        id: fetch-secrets
        uses: entrust/secret-vault-action@v1
        with:
          base_url: ${{ secrets.VAULT_URL }}
          auth_type: 'userpass'
          username: ${{ secrets.VAULT_USERNAME }}
          password: ${{ secrets.VAULT_PASSWORD }}
          vault_uid: ${{ secrets.VAULT_UID }}
          ca_cert: ${{ secrets.CA_CERT }}
          secrets: |
            # Recommended: Environment variables
            secret.env.AWS.accessKey | AWS_ACCESS_KEY_ID
            secret.env.AWS.secretKey | AWS_SECRET_ACCESS_KEY
            secret.env.Database.credentials | DB_CREDENTIALS
            secret.env.API.token | API_TOKEN
            
            # EXPERIMENTAL: File output
            secret.file.Certificates.sslCert | ./ssl/certificate.pem
            secret.file.SSH.privateKey | ./ssh/id_rsa

      # Step 2: Set appropriate permissions on files (if using file output)
      - name: Set file permissions
        run: |
          chmod 600 ./ssh/id_rsa
          chmod 644 ./ssl/certificate.pem

      # Step 3: Use environment variables directly
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

      # Step 4: Use secrets from outputs directly
      - name: Run API tests
        run: |
          ./run-api-tests.sh --token=${{ steps.fetch-secrets.outputs.API_TOKEN }}

      # Step 5: Use files created by the action (EXPERIMENTAL)
      - name: Use SSH key
        run: |
          ssh -i ./ssh/id_rsa user@example.com "echo 'Connection successful'"

      # Step 6: Deploy application
      - name: Deploy to production
        run: |
          ./deploy.sh --environment=production --cert=./ssl/certificate.pem
      
      # Step 7: CRITICAL - Clean up sensitive files
      - name: Clean up
        if: always()  # Run even if previous steps fail
        run: |
          # Securely remove sensitive files - DO NOT SKIP THIS STEP
          shred -u ./ssh/id_rsa
          rm -f ./ssl/certificate.pem
          # Clear AWS credentials
          aws configure set aws_access_key_id ""
          aws configure set aws_secret_access_key ""